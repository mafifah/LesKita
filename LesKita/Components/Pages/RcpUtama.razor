@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime _js
@inject ISvcStatusBar _svcStatusBar
@inject NavigationManager _nm
@inject RefreshViewState RefreshViewState
@inject IServiceProvider ServicesProv 
@inject IJSRuntime JSR
@using static modApplication
@inherits LayoutComponentBase
@namespace LesKita.Components
<script>
    // Men-trigger animasi bouncing pada elemen indikator
    window.triggerBouncingAnimation = () => {
    const indicator = document.querySelector(".indicator");
    if (!indicator) return;

    // Reset animasi agar bisa diulang
    indicator.classList.remove("bouncing");
    void indicator.offsetWidth; // Force reflow

    // Tambahkan kembali kelas animasi setelah sedikit delay
    setTimeout(() => {
    indicator.classList.add("bouncing");
    }, 50);
    };

    // Deteksi scroll dan panggil method .NET untuk update posisi scroll
    window.detectScrollPosition = (dotNetObject) => {
    document.addEventListener("scroll", () => {
    const scrollContainer = document.getElementById("scrollContainer");
    if (scrollContainer) {
    const scrollTop = scrollContainer.scrollTop;
    dotNetObject.invokeMethodAsync("UpdateScrollPosition", scrollTop);
    }
    }, true); // 'true' agar menangkap scroll di dalam elemen (bubbling)
    };

    // Ambil posisi scroll saat ini dari elemen container tertentu
    window.getScrollPositionInContainer = (containerId) => {
    try {
    const container = document.getElementById(containerId);
    if (container && typeof container.scrollTop === "number") {
    return Math.round(container.scrollTop);
    } else {
    console.warn(`Container dengan ID '${containerId}' tidak ditemukan atau tidak memiliki scrollTop.`);
    return 0;
    }
    } catch (error) {
    console.error("Terjadi kesalahan saat mengambil posisi scroll:", error);
    return 0;
    }
    };

    // Set posisi scroll ke nilai tertentu di elemen container
    window.setScrollPositionInContainer = (containerId, position) => {
    try {
    const container = document.getElementById(containerId);
    if (container) {
    container.scrollTop = position;
    } else {
    console.warn(`Container dengan ID '${containerId}' tidak ditemukan.`);
    }
    } catch (error) {
    console.error("Terjadi kesalahan saat mengatur posisi scroll:", error);
    }
    };
</script>
<style>
    body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    max-width: 100%;
    overflow-x: hidden;
    }


    button,
    .bottom-nav,
    .bottom-sheet-overlay {
    user-select: none; /* Mencegah seleksi teks */
    -webkit-user-select: none; /* Untuk browser berbasis WebKit (Chrome, Safari) */
    -moz-user-select: none; /* Untuk Firefox */
    -ms-user-select: none; /* Untuk Internet Explorer/Edge lama */
    }

    .modal-overlay {
    user-select: none;
    overscroll-behavior: contain !important; /* Mencegah scroll chaining */
    pointer-events: none !important; /* Tidak bisa diklik saat tersembunyi */
    }
    .modal-overlay.show {
    pointer-events: auto; /* Bisa diklik */
    user-select: text;
    }

    .button-panel-header {
    position: relative; /* Tambahkan agar efek highlight bisa muncul */
    box-shadow: none !important;
    color: #333  !important;
    margin-top: 0px;
    background-color: transparent;
    border: none;
    overflow: hidden; /* Supaya efek tetap dalam tombol */
    padding: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50px;
    }

    .button-panel-header:active::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4); /* Warna abu-abu gelap */
    border-radius: inherit;
    top: 0;
    left: 0;
    animation: highlightFadeButtonPanelHeader 0.5s forwards;
    mix-blend-mode: multiply;
    }

    @@keyframes highlightFadeButtonPanelHeader {
    0%

    {
    background-color: rgba(0, 0, 0, 0.4); /* Mulai dari abu-abu gelap */
    }

    100% {
    background-color: rgba(0, 0, 0, 0.1); /* Jadi abu-abu pudar */
    }

    }

    .exit-prompt {
    position: fixed;
    bottom: 50px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.75);
    color: white;
    padding: 10px 20px;
    border-radius: 10px;
    font-size: 14px;
    animation: fadeInOut 2s ease-in-out;
    }

    @@keyframes fadeInOut {
    0% { opacity: 0; }
    20% { opacity: 1; }
    80% { opacity: 1; }
    100% { opacity: 0; }
    }


    :root {
    --indicator-index: 2;
    }

    /* Bottom navigation bar */
    .bottom-nav {
    position: absolute;
    width: 100vw;
    height: 40px;
    display: flex;
    justify-content: space-around;
    align-items: flex-end;
    background-color: #fff;
    box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.15);
    overflow: visible;
    visibility: @BottomNavVisible;
    }

    /* Navigation buttons */
    .nav-item {
    flex: 1;
    text-align: center;
    color: #94A3B8;
    font-size: 24px;
    cursor: pointer;
    position: relative;
    z-index: 1;
    transition: color 0.3s ease;
    background: none;
    border: none;
    padding: 5px 0 0 0;
    }

    .nav-item.active,
    .nav-item.active:hover {
    color: transparent !important;
    }
    .nav-item:hover {
    color: #3F3F41;
    }

    /* Floating indicator */
    .indicator {
    position: absolute;
    top: -15px;
    left: calc((var(--indicator-index)* 20%) + 10%);
    width: 45px;
    height: 45px;
    background-color: #6282c8;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: left 0.05s ease-in-out;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3); /* Shadow lebih tegas agar indicator tampak melayang */
    z-index: 2;
    transform: translateX(-50%);
    border: 2px solid #fff;
    }

    /* Efek bouncing ke atas setelah pindah */
    .indicator.bouncing {
    animation: bounceEffect 0.3s ease-out 0.05s forwards; /* Delay 0.05s setelah pindah */
    }

    /* Keyframe untuk animasi bouncing */
    @@keyframes bounceEffect {
    0% {
    transform: translateX(-50%) translateY(0);
    }
    /* Posisi awal */
    35% {
    transform: translateX(-50%) translateY(-17px);
    }
    /* Naik ke atas */
    70% {
    transform: translateX(-50%) translateY(0);
    }
    /* Turun ke bawah */
    85% {
    transform: translateX(-50%) translateY(-7px);
    }
    /* Sedikit naik lagi */
    100% {
    transform: translateX(-50%) translateY(0);
    }
    /* Kembali ke posisi semula */
    }

    .floating-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 28px;
    color: #3F3F41;
    width: 100%;
    height: 100%;
    transition: transform 0.2s ease-out, opacity 0.2s ease-out;
    }
</style>
<style>
    @@import url('https://fonts.googleapis.com/css2?family=Montserrat');
    @@import url('https://fonts.googleapis.com/css2?family=Lato');

    .container-utama{
    background-color: #fff;
    }
    .header {
    background-color: #6282c8 !important;
    color:white;
    height: 178px;
    padding-top: 30px;
    }
    .profile-img {
    width: 40px;
    height: 40px;
    object-fit: cover;
    border-radius: 50%;
    }
    .greeting {
    font-size: 12px;
    opacity: 0.9;
    }

    .username {
    font-size: 16px;
    font-weight: 600;
    margin: 0;
    }
    .notifikasi-container{
    width: 28px;
    height: 28px;
    background-color:#fff;
    object-fit: cover;
    border-radius: 50%;
    }
    .notifikasi-container button {
    width: 28px;
    height: 28px;
    background-color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    border: none;
    padding: 0;
    }

    .badge-notif-custom {
    position: absolute;
    top: 4.5px;
    right: 6px;
    width: 8px;
    height: 8px;
    background-color: #be2d39;
    border-radius: 50%;
    }


    .page {
    height: calc(100vh - 220px);
    overflow: auto;
    }
    .page::-webkit-scrollbar {
    height: 0; /* Menyembunyikan scrollbar horizontal */
    width: 0;
    }

    .font-custom {
    font-family: Montserrat;
    letter-spacing: 0.1em;
    line-height: 1.6em;
    font-size: inherit.7em !important;
    }

    .font-header-custom {
    font-family: Prata;
    letter-spacing: 0.019em;
    }

    .sticky-header {
    position: -webkit-sticky;
    position: sticky;
    background-color: transparent;
    top: 0;
    z-index: 1;
    overflow: auto;
    white-space: nowrap;
    border: 0;
    }

    /* .warna-icon {
    color: WarnaIcon_Header !important;
    }

    .warna-icon-header {
    color: WarnaIcon_Header;
    } */

    .ukuran-icon-header {
    font-size: 1.4em !important;
    }

    .menu-utama-icon {
    width: 2.6em;
    height: 2.6em;
    /*padding-left: 1.2em; */
    margin-left: 0.5em
    }

    .menu-utama-icon-title {
    line-height: 0 !important;
    padding: 0.2em
    }

    #body {
    background-color: transparent;
    height: 100%;
    margin: 0px;
    padding: 0px;
    }



    .hide-scrollbar div::-webkit-scrollbar {
    display: none !important;
    }

    .navbar {
    border-top: 1px;
    border-color: lightgrey;
    padding-top: 0px !important;
    padding-bottom: 0px !important;
    }

    .navbar-ukuran-icon {
    width: 2em;
    height: 2em;
    }

    .fil0 {
    fill: none
    }
    .warna-menu {
    color: lightgray !important;
    fill: lightgray !important;
    }

    .input-group {
    background-color: #333 !important;
    margin-top: 0.5em !important;
    margin-bottom: 0.5em !important;
    margin-left: 0.5em !important;
    border-radius: 0.5em !important;
    box-shadow: 0px 1px 12px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(211, 211, 211, 0.5) !important;
    overflow: hidden; /* Agar elemen dalamnya tidak keluar dari border */
    }

    .input-group:focus-within {
    border: 1px solid lightgray !important;

    }


    .input-group-text {
    border: none;
    background-color: #333 !important;
    color: lightgray !important;
    font-size: 0.7rem !important;
    border-top-left-radius: 0.5em !important;
    border-bottom-left-radius: 0.5em !important;
    }

    .input-group .form-control {
    box-shadow: none !important;
    border: none;
    font-family: Montserrat !important;
    background-color: #333;
    color: lightgray !important;
    border-top-right-radius: 0.5em !important;
    border-bottom-right-radius: 0.5em !important;
    }


    #ModalCariContainer {
    position: fixed;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    align-items: flex-end;
    justify-content: center;
    display: none;
    }

    #ModalCariContainer.active {
    display: flex;
    }

    #ModalCari {
    background-color: #fff;
    width: 100%;
    height: 100%;
    transform: translateY(100%);
    transition: transform 0.4s ease-in-out;
    }

    #ModalCari.active {
    transform: translateY(0);
    }
    /*CSS Menu Utama*/

    .row.vertical-divider {
    overflow: hidden;
    }

    .row.vertical-divider > div[class^="col-"] {
    text-align: center;
    margin-top: -0.1em;
    border-left: 1px solid #e0e0e0;
    border-right: 1px solid #e0e0e0;
    }

    .row.vertical-divider div[class^="col-"]:first-child {
    border-left: none;
    }

    .row.vertical-divider div[class^="col-"]:last-child {
    border-right: none;
    }
</style>
<style>
    .header-bar {
    display: flex;
    align-items: center;
    gap: 8px; /* Beri sedikit jarak antara ikon dan teks */
    opacity: 0.9;
    margin-left:16px;
    margin-top:5px;
    margin-bottom:11px;
    }

    .header-bar button {
    box-shadow: none !important;
    background: none;
    border: none;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .header-bar span {
    font-size: 16px; /* Sesuaikan ukuran teks */
    color: inherit; /* Biar warna teks sama dengan ikon */
    font-weight:500;
    }

    .search-icon{
    background-color: transparent;
    font-size: 0.7rem !important;
    background-color: #333;
    color: lightgray !important;
    }
    .search-input{
    box-shadow: none !important;
    border: none;
    font-family: Montserrat !important;
    background-color: #333;
    color: lightgray !important;
    margin-left: -12px;
    }

    .panel-cari{
    margin-left: -3px;
    }
</style>
<!-- #region Style RcpUtama Pantheon -->

<style>
    @*google icon*@
    @@font-face {
    font-family: 'Material Symbols Outlined';
    font-style: normal;
    font-weight: 200;
    font-display: block;
    src: url('/icons/MaterialSymbolsOutlined.woff2') format('woff2');
    }

    .material-symbols-outlined {
    font-family: 'Material Symbols Outlined';
    font-weight: normal;
    font-style: normal;
    font-size: 24px;
    line-height: 1;
    letter-spacing: normal;
    text-transform: none;
    display: inline-block;
    white-space: nowrap;
    word-wrap: normal;
    direction: ltr;
    -webkit-font-feature-settings: 'liga';
    -webkit-font-smoothing: antialiased;
    }

    * {
        font-family: az_ea_font, "Segoe UI", az_font, system-ui, -apple-system, BlinkMacSystemFont, Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        font-weight: 400;
    }

    

    body {
    overflow-x: hidden !important;
    overflow: hidden !important;
    padding: 0 !important;
    }

    ul {
        list-style-type: none;
    }
    .header_profile-avatar {
    width: 2rem;
    height: 2rem;
    background-color: #8D8D8D;
    }

    .header_profile-flyoutheader_profile-flyout {
    width: 3.5rem;
    height: 3.5rem;
    background-color: #8D8D8D;
    }

    .header_profile-avatar-initial {
    padding-top: .2rem;
    font-weight: 500;
    font-size: 16px;
    margin: 0 !important;
    }

    .header_profile-avatar-cari-data {
    width: 18px;
    height: 18px;
    background-color: #8D8D8D;
    align-content: center;
    }

    .header_profile-avatar-initial-cari-data {
    padding: 0rem;
    font-size: 10px;
    font-weight: 500;
    margin: 0;
    height: 14px;
    width: 18.5px;
    }

    .header_profile-flyout-initial {
    padding-top: .6rem;
    font-weight: 600;
    font-size: 25px
    }

    .header_menu-sidebar {
    background-color: #E9E9E9;
    width: 14rem;
    height: 100vh;
    box-shadow: 0 6.4px 14.4px 0 rgba(0, 0, 0, .132), 0 1.2px 3.6px 0 rgba(0, 0, 0, .108);
    }

    .header_menu-sidebar-close .btn-link:focus,
    .header_menu-sidebar-close .btn-link:active {
    outline: none !important;
    box-shadow: none !important;
    -webkit-box-shadow: none !important; /* For WebKit browsers */
    -moz-box-shadow: none !important; /* For Firefox */
    }

    .header_menu-sidebar-close .btn-link {
    cursor: pointer;
    user-select: none;
    }

    .header_menu-sidebar-close {
    position: sticky;
    z-index: 55;
    background-color: #E9E9E9 !important;
    }

    .header_menu-sidebar-close:hover {
    background-color: #C8C8C8 !important;
    }

    .portal-bg {
    box-shadow: 0 1.6px 3.6px 0 rgba(0,0,0,.132), 0 .3px .9px 0 rgba(0,0,0,.108);
    min-width: 300px;
    max-width: 100%;
    overflow: hidden;
    outline: 0 !important;
    height: 100%;
    box-sizing: border-box;
    position: relative;
    display: flex;
    flex-direction: column;
    line-height: normal;
    }

    .portal-header {
    position: relative;
    height: 64px;
    flex-shrink: 0;
    box-sizing: border-box;
    }

    .portal-title-content {
    display: flex;
    height: 100%;
    box-sizing: border-box;
    padding: 8px 20px;
    }

    .portal-title {
    visibility: visible;
    flex: 1 1 auto;
    min-width: 0;
    width: 100%;
    }

    .portal-title-toprow {
    display: flex;
    visibility: visible;
    }

    .portal-title-text {
    font-weight: 600;
    font-size: 24px;
    line-height: 28px;
    flex: 0 1 auto;
    margin-right: 16px;
    margin: 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    visibility: visible;
    }

    .portal-title-action {
    user-select: none;
    outline: 0 !important;
    display: flex;
    flex: 1 0 auto;
    justify-content: flex-end;
    visibility: visible;
    }

    .portal-spacefiller {
    outline: 0 !important;
    flex: 1 1 auto;
    user-select: none;
    visibility: visible;
    }

    .portal-btn-close {
    visibility: visible;
    outline: 0 !important;
    font-size: 13px;
    line-height: 1.385;
    background: none;
    color: inherit;
    width: 32px;
    cursor: pointer;
    padding: 0;
    border: 0;
    margin: 0;
    transition: background-color .2s ease-out;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: az_ea_font, "Segoe UI", az_font, system-ui, -apple-system, BlinkMacSystemFont, Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
    font-weight: 400;
    border-radius: 0;
    }

    .portal-content-container {
    display: block;
    outline: 0 !important;
    height: 100%;
    position: relative;
    flex-direction: row;
    flex: 1 1 auto;
    min-height: 0;
    }

    .portal-content-container-default {
    flex: 0 0 auto;
    display: flex;
    flex-direction: column;
    position: relative;
    min-width: 0;
    outline: 0 !important;
    width: 100%;
    height: 100%;
    }

    .portal-content-wrapper {
    overflow: auto;
    height: 100%;
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    box-sizing: border-box;
    position: relative;
    }

    .portal-content {
    padding: 0;
    height: 100%;
    flex: 1 1 auto;
    position: relative;
    box-sizing: border-box;
    min-height: 0;
    }

    .portal-stacklayout {
    padding: 0;
    flex-direction: column;
    display: flex;
    height: 100%;
    box-sizing: border-box;
    }

    .portal-notificationpane {
    width: 525px;
    max-width: 100%;
    height: 100%;
    box-sizing: border-box;
    font-size: 13px;
    line-height: normal;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    flex: 0 0 auto;
    }

    .portal-notificationpane-top {
    overflow: auto;
    width: 100%;
    padding: 0 20px;
    box-sizing: border-box;
    }

    .portal-notificationpane-top-message {
    overflow: auto;
    width: 100%;
    padding: 0 0 75px 10px;
    box-sizing: border-box;
    border-top: .2px solid #D6D6D6;
    }

    .portal-notificationpane-header {
    padding: 0 20px 10px;
    }

    .portal-notificationpane-header-content {
    display: flex;
    padding-top: 15px;
    }

    .portal-notificationpane-activitylog-link {
    color: #0078d4;
    text-decoration: none;
    }

    .portal-notificationpane-activitylog-link:hover {
    text-decoration: underline;
    cursor: pointer;
    user-select: none;
    }

    .portal-notificationmenu-arrow {
    margin-top: -2px;
    padding-left: 3px;
    height: 10px;
    width: 10px;
    }

    .portal-notification-dismisscontainer {
    margin-left: auto;
    display: flex;
    }

    .portal-notification-dismissitem {
    color: #0078d4;
    display: flex;
    text-decoration: none;
    }

    .portal-notification-action-menu {
    margin-top: -5px;
    }

    .portal-notification-dropmenu {
    position: relative;
    box-sizing: border-box;
    z-index: 200;
    }

    .portal-notification-dropmenu-button {
    border: 0;
    padding: 0;
    margin: 0;
    background: none;
    cursor: pointer;
    display: flex;
    position: relative;
    height: 100%;
    align-items: center;
    justify-content: center;
    }

    .portal-notification-dropdown-button-item {
    margin: 4px 5px 0;
    padding: 4px 5px;
    opacity: .7;
    border: 0;
    width: 100%;
    text-align: left;
    }

    .portal-notification-dropdown-button-container {
    display: flex;
    align-items: center;
    }

    .portal-notification-dropdown-button-icon {
    height: 14px;
    width: 14px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    }

    .portal-notification-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    outline: 0 !important;
    }

    .portal-notification-empty-icon {
    filter: grayscale(100%);
    height: 170px;
    padding-top: 100px;
    padding-bottom: 20px;
    opacity: .4;
    }

    .portal-notificationpane-list {
    overflow: hidden;
    list-style: none;
    padding: 0;
    margin: 0;
    width: 100%;
    }

    .portal-notification-li {
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-top-width: 1px;
    border-top-style: solid;
    border-color: #f0f0f0;
    padding: 0 10px; /* Memberikan ruang kiri-kanan pada list item */
    transition: opacity 0.5s, transform 0.5s;
    opacity: 1;
    transform: translateY(0);
    }

    .portal-notification-li:hover {
    background-color: #f0f0f0;
    }

    .portal-notification-li.removing {
    opacity: 0;
    transform: translateY(-20px);
    }

    .portal-notificationmenu-notification-wrapper {
    padding: 10px 15px 10px 0px; /* Menambahkan ruang kanan untuk lebih mengatur posisinya */
    display: flex;
    position: relative;
    }

    .portal-notificationmenu-notification {
    width: 100%;
    margin-right: 25px; /* Memberikan jarak lebih pada kanan untuk memberi ruang icon lebih jauh dari separator */
    }

    .portal-notificationmenu-notification-title {
    display: flex;
    padding-bottom: 2px;
    max-width: calc(100% - 20px);
    }

    .portal-notificationmenu-notification-title-icon {
    margin-top: -2px;
    margin-right: 4px;
    min-width: 16px;
    }

    .portal-notificationmenu-notification-title-text {
    font-size: 14px;
    display: block;
    display: -webkit-box;
    line-height: 19px;
    max-height: 38px;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow-wrap: break-word;
    margin: 0 4px;
    flex: 1 0 0;
    font-weight: 600;
    text-align:left;
    }

    .portal-notificationmenu-notification-description {
    color: #646464;
    max-height: 100%;
    overflow-y: auto;
    font-size: 13px;
    line-height: normal;
    display: flex;
    line-height: 18px;
    max-height: 144px;
    overflow: hidden;
    position: relative;
    padding-top: 5px;
    text-overflow: ellipsis;
    white-space: pre-wrap;
    width: 100%;
    align-items: center;
    text-align:left;
    gap: 8px;
    }

    .portal-notification-inlineform {
    width: 100%;
    display: block;
    padding-top: 15px;
    }

    .portal-notification-time-info {
    color: #646464;
    min-height: 20px;
    padding-top: 10px;
    text-decoration: #7a7a7a;
    display: flex;
    margin-left: 10px;
    }

    .portal-notification-time-info-text {
    margin-left: auto;
    font-size: 13px;
    line-height: normal;
    margin-right: -31px;
    }

    .portal-notificationmenu-notification-dismissicon {
    cursor: pointer;
    background-color: transparent;
    border: 0;
    margin: 0;
    padding: 0;
    opacity: .4;
    padding-bottom: 8px;
    flex: 0 0 auto;
    position: absolute;
    top: 8px;
    right: 0;
    opacity: 1;
    }

    .nodata-content {
    padding: 15px 0;
    text-align: center;
    font-weight: bold;
    font-size: 14px;
    outline: 0 !important;
    }

    .portal-notificationpane-activitylog {
    color: #0078d4;
    text-decoration: none;
    }
    .search-back-icon {
    display: flex;
    height: 40px;
    width: 40px;
    flex: 0 0 auto;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    text-decoration: none;
    user-select: none;
    }

   .dxbl-list-box.cw-640.ch-360{
        border: none !important;
        width: 100%;
        height: 100%;
    }

    .listbox-item-template{
    display: flex;
    align-items: center;
    justify-content: flex-start;
    flex-direction: row;
    gap: 10px;
    width: 100%;
    padding: 5px 0;
    }

    .listbox-item-template-text {
    display: flex;
    flex-direction: column;
    }

    .listbox-item-template-text-username {
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 0 !important;
    }

    .listbox-item-template-text-message {
    font-size: 12px;
    opacity: 0.6;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 360px;
    margin-bottom: 0;
    }

    .listbox-item-template-time{
    display: flex;
    width: 10rem;
    justify-content: flex-end;
    margin-left: auto;
    position:fixed;
    right:15px;
    }

    .listbox-item-template-time-text{
    font-size: 10px;
    opacity: 0.4;
    margin-top: 0px;
    position: relative;
    top: -1px;
    }

    .portal-notification-bottom {
    width: 100%;
    position: absolute;
    bottom: 0;
    background-color: white;
    border-top: .2px solid #D6D6D6;
    height: 5.5rem;
    }

    .portal-notification-bottom-button {
    text-align: right;
    margin-right: 2rem;
    margin-top: 1rem;
    color: #0078D4;
    font-size: 13px;
    cursor: pointer;
    }

    .listbox-item-template-avatar {
    width: 3rem;
    height: 3rem;
    background-color: #8D8D8D;
    border-radius: 50% !important;
    text-align: center;
    object-fit: cover;
    }

    .listbox-item-template-avatar img,
    .account-avatar img,
    .list-contact-avatar img,
    .avatar-group-wrapper img,
    .display-profile-grup img,
    .portal-personal-avatar img,
    .dropdown-currentaccount-picture img,
    .dropdown-profilepic-avatar img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
    }

    .listbox-item-template-initial{
    padding-top: .75rem;
    color: white;
    font-weight: 500;
    font-size: 16px;
    margin: 0 !important;
    }

    .listbox-item-template-unread-notif {
    width: 1rem;
    height: 1rem;
    background-color: #6282c8;
    border-radius: 50% !important;
    text-align: center;
    color: white;
    margin-top: .9rem;
    position:fixed;
    }

    .portal-new-message-content-container{
    padding: 0 10px;
    }

    .portal-personal-message{
    display: flex;
    padding: 5px 20px;
    background-color: #FFFF;
    }

    .portal-personal-header{
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 10px;
    }

    .portal-personal-avatar {
    width: 3rem;
    height: 3rem;
    background-color: #8D8D8D;
    border-radius: 50% !important;
    text-align: center;
    }

    .portal-personal-avatar:hover{
    background-color: #757575;
    cursor: pointer;
    }

    .portal-personal-avatar:focus{
    background-color: #606060;
    cursor: pointer;
    }

    .portal-personal-avatar:active{
    background-color: #525050;
    cursor: pointer;
    }

    .portal-personal-initial{
    padding-top: .75rem;
    color: white;
    font-weight: 500;
    font-size: 16px;
    margin: 0 !important;
    }

    .portal-personal-text-wrapper {
    display: flex;
    flex-direction: column;
    }

    .portal-personal-username {
    font-size: 14px;
    font-weight: 500;
    margin-bottom: 0 !important;
    }

    .portal-personal-username:hover{
    font-weight: 600;
    cursor: pointer;
    }

    .portal-personal-username:focus{
    font-weight: 700;
    cursor: pointer;
    }

    .portal-personal-status-wrapper {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 5px;
    margin-top: 2px;
    }

    .portal-personal-status {
    font-size: 12px;
    opacity: 0.6;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: calc(50ch);
    margin-bottom: 0;
    }

    .portal-personal-status-circle{
    width: 10px;
    height: 10px;
    background-color: #45E47A;
    border-radius: 50%;
    }

    .personal-chat-wrapper {
    padding-top:5px;
    padding-bottom:5px;
    padding-left:3px;
    padding-right:5px;
    }

    .personal-chat-timeline-line {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    position: relative;
    border-bottom:none !important;
    top:5px !important;
    }

    .personal-chat-timeline-line::before, 
    .personal-chat-timeline-line::after {
    margin-top: -.5rem;
    content: '';
    flex-grow: 1;
    height: 1px;
    background-color: #dad9d9;
    }

    .personal-chat-timeline-line::before {
    margin-right: 10px;
    }

    .personal-chat-timeline-line::after {
    margin-left: 10px;
    }

    .personal-chat-timeline-label {
    background-color: #dad9d9;
    color: #6e6e6e; 
    padding: 5px 15px;
    border-radius: 9px;
    font-size: 10px;
    white-space: nowrap;
    text-align: center;
    z-index: 1;
    margin-bottom: 10px;
    font-family: 'Nunito Sans', sans-serif !important;
    font-weight: 400;
    line-height: 10px;
    }

    .chat-component-wrapper-recipient-message {
    display: flex;
    min-width:60px;
    max-width:350px;
    background-color: #ffff;
    color: #00000080;
    border-radius: 0px 5px 5px 5px;
    flex-direction: column;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }


    .chat-component-wrapper-personal-message {
    min-width:60px;
    background-color: #EAF6FF;
    color: #00000080;
    border-radius: 5px 0px 5px 5px;
    flex-direction: column;
    margin-left: auto;
    max-width: 350px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }

    .chat-component-wrapper-system {
    background-color:transparent;
    margin:8px;
    }

    .chat-component-wrapper-system > p {
    width:max-content;
    position: relative;
    top: 8px;
    }

    .chat-component-wrapper-personal {
    display: flex;
    width: fit-content;
    justify-content: flex-start;
    align-items: center;
    margin-left:auto;
    padding-right:10px;
    }

    .chat-component-wrapper {
    width: fit-content;
    display: flex;
    flex-direction: row;
    align-items:center;
    justify-content: center;
    gap:10px;
    }

    .chat-component-wrapper-system-true {
    display: flex;
    width: max-content;
    position: relative;
    margin: auto;
    background-color: #ffeecd;
    height: 25px;
    align-items: center;
    justify-content: center;
    border-radius: 5px;
    }

    .chat-component-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    height: 22px;
    flex-wrap:wrap-reverse;
    align-content: center;
    }

    .chat-component-time{
    margin-bottom: 0px;
    margin-top: -12px;
    margin-left: 5px;
    z-index: 10;
    position: relative;
    float: right;
    margin-right: 0;
    font-size: 10.5px;
    }

    .chat-component-time-child{
    height: 15px;
    white-space: nowrap;
    display: flex;
    align-items: center;
    line-height: 15px;
    float: right;
    margin-right: 0;
    }

    .portal-reply-message-wrapper{
    display: flex;
    flex-direction: column;
    background-color: #F0F8FF;
    padding:5px 7px 0px 7px;
    margin-bottom: 2px;
    border-radius: 5px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);
    }

    .portal-reply-message-wrapper > p {
    font-family: 'Nunito Sans', sans-serif;
    font-weight: 500 !important;
    font-size: 11px !important;
    line-height: 10px;
    }

    .portal-document-message-wrapper{
    display: flex;
    flex-direction: row;
    background-color: #0000001A;
    padding: 10px 15px;
    margin-bottom: 10px;
    align-items: center;
    gap: 10px;
    }

    .chat-dropdown-more{
    display: flex;
    flex-direction: column;
    width:100%;
    }

    .chat-btn-action {
    display:flex;
    flex-direction: row;
    align-items: center;
    cursor: pointer;
    padding: 3px;
    width:100%;
    }

    .chat-btn-action:hover{
    background-color: rgba(217, 217, 217, 0.4);
    cursor: pointer;
    }

    .chat-btn-action:focus{
    background-color: rgba(217, 217, 217, 0.8);
    cursor: pointer;
    }

    .chat-btn-action:active
    background-color: rgba(217, 217, 217, 0.9);
    cursor: pointer;
    }

    .portal-personal-message-bottom {
    width: 100%;
    position: absolute;
    bottom: 0;
    background-color: #fff;
    height: 7rem;
    padding: 25px 10px;
    }

    .action-send-wrapper{
    display: flex;
    flex-direction: row;
    align-items: flex-end;
    gap:10px;
    justify-content: space-between;
    }

    .input-message-wrapper{
    display: flex;
    flex-direction: row;
    align-items: center;
    position: relative;
    width:-webkit-fill-available;
    }

    .input-message {
    width: 25rem;
    border-radius: 5px !important;
    padding-left: 1rem;
    }

    .input-message-search{
    width: 100%;
    border-radius: 5px !important;
    background-color: #F7F7F7;
    border: none;
    height: 2.3rem;
    color: #606060 ;
    padding-left: .5rem;
    }

    .btn-action-attach{
    position: absolute;
    cursor: pointer; 
    z-index: 1; 
    margin-top: 5px;
    }

    .btn-action-sticker {
    position: absolute;
    right: 5px;
    cursor: pointer;
    z-index: 1;
    margin-top: 7px;
    }

    .attach-dropdown-panel{
    display: flex;
    flex-direction: column;
    width: 100%;
    }

    .reply-chat-context{
    display: flex;
    flex-direction: row;
    }

    .reply-chat-content{
    display: flex;
    flex-direction: column;
    background-color: #0000001A;
    padding: 5px 7px;
    border-left: 8px solid #ED000099;
    margin-bottom: 10px;
    }

    
</style>
<!-- #endregion -->
<style>
    /*Highlight button yang memiliki icon jika diklik atau diketuk*/
    .button-with-icon {
    position: relative;
    overflow: hidden; /* Supaya efek tidak keluar dari tombol */
    }

    .button-with-icon:active::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.4); /* Warna abu-abu gelap */
    border-radius: inherit;
    top: 0;
    left: 0;
    animation: highlightFade 0.5s forwards;
    mix-blend-mode: multiply;
    }

    @@keyframes highlightFade {
    0%

    {
    background-color: rgba(0, 0, 0, 0.4); /* Mulai dari abu-abu gelap */
    }

    100% {
    background-color: rgba(0, 0, 0, 0.1); /* Jadi abu-abu pudar */
    }

    }



    .btn-pressed {
    position: relative;
    overflow: hidden; /* Supaya efek tidak keluar dari tombol */
    }
    .btn-pressed:active::after {
    content: "";
    position: absolute;
    top: 0;
    left: 100%; /* Mulai dari luar kanan */
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.2);
    animation: highlightMove 0.1s forwards ease-out; /* Animasi gerak */
    mix-blend-mode: multiply; /* Supaya ikon tetap terlihat */
    }

    .btn-pressed.lainnya:active::after {
    background: #E9BB4B !important;
    animation: highlightMove 0.1s forwards ease-out; /* Animasi gerak */
    mix-blend-mode: multiply; /* Supaya ikon tetap terlihat */
    }

    @@keyframes highlightMove {
    from {
    left: 100%; /* Mulai dari luar kanan */
    }

    to {
    left: 0; /* Bergerak ke kiri */
    }
    }
</style>
<style>
    .refresh-indicator {
    position: absolute;
    top: -50px; /* Sembunyikan di atas */
    left: 50%;
    transform: translateX(-50%);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: white;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: top 0.3s ease-in-out;
    }

    .refresh-indicator.show {
    top: 10px; /* Munculkan indikator */
    }

    .refresh-indicator .arrow {
    font-size: 24px;
    transition: transform 0.3s ease-in-out;
    }

    .refresh-indicator.refreshing .arrow {
    display: none;
    }

    .refresh-indicator.refreshing .spinner {
    display: block;
    }

    .spinner {
    width: 24px;
    height: 24px;
    border: 3px solid rgba(0, 0, 0, 0.1);
    border-top: 3px solid #4CAF50; /* Warna hijau ala Tokopedia */
    border-radius: 50%;
    animation: spin 1s linear infinite;
    display: none;
    }

    @@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
    }
</style>
<style>
    .button-panel-header{
    -webkit-user-select: none; /* Mencegah seleksi teks di Safari/Chrome */
    -moz-user-select: none; /* Mencegah seleksi teks di Firefox */
    -ms-user-select: none; /* Mencegah seleksi teks di IE/Edge */
    user-select: none; /* Mencegah seleksi teks di semua browser */
    -webkit-tap-highlight-color: transparent; /* Hilangkan efek tap di perangkat mobile */
    outline: none; /* Hilangkan outline saat tombol ditekan */
    }
</style>
<script>
    let mediaRecorder;
    let audioChunks = [];
    let audioBlob;

    let waveMicInstance;
    let globalStream; // <-- tambahkan ini
    window.startRecording = async (dotNetHelper, id) => {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    globalStream = stream; // Simpan stream ke variabel global

    // Inisialisasi MediaRecorder seperti biasa
    const options = { mimeType: 'audio/webm;codecs=opus' };
    mediaRecorder = new MediaRecorder(stream, options);
    audioChunks = [];

    mediaRecorder.ondataavailable = event => {
    if (event.data.size > 0) {
    audioChunks.push(event.data);
    }
    };

    mediaRecorder.onstop = async () => {
    audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
    const audioUrl = URL.createObjectURL(audioBlob);
    window.recordedAudioBlob = audioBlob;
    window.recordedAudioUrl = audioUrl;

    // Kirim ke server
    const formData = new FormData();
    const fileName = `recording-${id}.webm`;
    formData.append('file', audioBlob, fileName);

    const response = await fetch('/upload-audio', {
    method: 'POST',
    body: formData
    });

    const serverAudioUrl = await response.text();

    dotNetHelper.invokeMethodAsync('SetAudioUrl', serverAudioUrl);
    };

    mediaRecorder.start();

    try{
    // WaveSurfer setup
    waveMicInstance = WaveSurfer.create({
    container: '#recording_wave_mic',
    waveColor: '#606060',
    interact: false,
    cursorWidth: 0,
    height: 60,
    plugins: [
    WaveSurfer.microphone.create()
    ]
    });

    waveMicInstance.on('deviceReady', () => {
    console.log("Mic ready");
    });

    waveMicInstance.on('deviceError', err => {
    console.error("Mic error:", err);
    });

    await waveMicInstance.microphone.start();
    }catch(e){
    alert('Gagal akses mic: ' + e.message);
    console.error(e);
    }
    };

    window.stopRecording = () => {
    if (mediaRecorder && mediaRecorder.state === "recording") {
    mediaRecorder.stop();
    }

    // Stop waveMicInstance
    if (waveMicInstance) {
    waveMicInstance.microphone.stop();
    waveMicInstance.destroy();
    waveMicInstance = null;
    }

    // 🔥 PENTING: hentikan semua audio track
    if (globalStream) {
    globalStream.getTracks().forEach(track => track.stop());
    globalStream = null;
    }
    };

</script>
<CascadingValue Value="this">
    <div class="container-utama">
        <div class="d-flex justify-content-between align-items-start header px-3">
            <div class="d-flex align-items-center">
                <img src="https://sdatafile.blob.core.windows.net/gajahmasantarniaga/Gambar/Display%20Picture/Karyawan-Auto" class="rounded-circle profile-img" alt="Foto Profil">
                <div class="ms-2">
                    <p class="mb-0 greeting">@GetGreeting()</p>
                    <h5 class="mb-0 username">@Username</h5>
                </div>
            </div>
            <div class="notifikasi-container">
                <button id="popup-notifikasi" type="button" class="button-panel-header btn-default  position-relative" @onclick="(() => { TampilkanNotifikasi = !TampilkanNotifikasi; StartTimerNotifikasi(); ModalNotifikasi?.Show(); RefreshViewState.IsEnabled = false;})">
                    <span class="badge-notif-custom" style="visibility: @(DtNotifikasi.Any() && DtNotifikasi.Where(x => x.IsRead != true).Count() > 0 ? "visible":"hidden")"></span>
                    <span class="material-symbols-outlined" style="font-size: 20px;" aria-hidden="true">notifications</span>
                </button>
            </div>
        </div>
        <div id="scrollContainer" class="page">
            @RfContent
        </div>

        <div class="bottom-nav" style="--indicator-index: @(GetIndicatorIndex(activeTab));">
            <!-- Indikator Aktif -->
            <div class="indicator">
                <div class="floating-icon">
                    <span class="material-symbols-outlined" style="font-variation-settings: 'FILL' 1, 'wght' 200, 'GRAD' 0, 'opsz' 24; color: white">@GetIcon(activeTab)</span>
                </div>
            </div>

            <!-- Tombol Navigasi -->
            <button class="nav-item @(activeTab == "order" ? "active" : "")" @onclick="@(() => SetActiveTab("order"))">
                <span class="material-symbols-outlined">view_agenda</span>
            </button>
            <button class="nav-item @(activeTab == "jadwal" ? "active" : "")" @onclick="@(() => SetActiveTab("jadwal"))">
                <span class="material-symbols-outlined">event_note</span>
            </button>
            <button class="nav-item @(activeTab == "beranda" ? "active" : "")" @onclick="@(() => SetActiveTab("beranda"))">
                <span class="material-symbols-outlined">home</span>
            </button>
            <button class="nav-item @(activeTab == "bantuan" ? "active" : "")" @onclick="@(() => SetActiveTab("bantuan"))">
                <span class="material-symbols-outlined">chat</span>
            </button>
            <button class="nav-item @(activeTab == "akun" ? "active" : "")" @onclick="@(() => SetActiveTab("akun"))">
                <span class="material-symbols-outlined">person</span>
            </button>
        </div>
    </div>

    <PthModal @ref="ModalNotifikasi">
        <div class="header-bar">
            <button type="button" @onclick="(() => { ModalNotifikasi.Close(); StopTimerNotifikasi(); })" class="btn button-with-icon btn-default pesan">
                <span style="scale: 1.2;" class="material-symbols-outlined" aria-hidden="true">arrow_back</span>
            </button>
            <span>@($"{($"Notifikasi")}")</span>
        </div>
        <div class="portal-content-container">
            <div class="portal-content-container-default">
                <div class="portal-content-wrapper">
                    <div class="portal-content">
                        <div class="portal-stacklayout">
                            <div class="portal-notificationpane">
                                @if (DtNotifikasi.Any())
                                {
                                    <!-- Ketika ada data notification -->
                                    <div class="portal-notificationpane-header">
                                        <div class="portal-notificationpane-header-content">
                                            <div class="portal-notification-dismisscontainer">
                                                <div>
                                                    <a role="link" class="portal-notificationpane-activitylog-link" @onclick="ProsesDismissAll">@($"{($"Hapus Notifikasi")}")</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="portal-notificationpane-top">
                                        <ul class="portal-notificationpane-list">
                                            @foreach (var notif in DtNotifikasi.OrderByDescending(x => x.WaktuProsesNotifikasi))
                                            {
                                                <li class="portal-notification-li @(notif.IsBeingRemoved ? "removing" : "")">
                                                    <div class="portal-notificationmenu-notification-wrapper">
                                                        <div class="portal-notificationmenu-notification">
                                                            <div class="portal-notificationmenu-notification-title">
                                                                <div class="portal-notificationmenu-notification-title-icon">
                                                                    <span class="material-symbols-outlined" style="scale:.9;vertical-align: middle;color: #428000; font-variation-settings:'FILL' 1, 'wght' 200, 'GRAD' 80, 'opsz' 24">data_check</span>
                                                                </div>
                                                                <div class="portal-notificationmenu-notification-title-text">@notif.Form</div>
                                                            </div>
                                                            <div class="portal-notificationmenu-notification-description">
                                                                <span style="visibility:hidden;">
                                                                    <img src="" class="rzi rz-navigation-item-icon" style="height: 25px; width: 25px; display: flex;" />
                                                                </span>
                                                                @(notif?.IsiPesan ?? "")
                                                            </div>
                                                            <div class="portal-notification-inlineform"></div>
                                                            <div class="portal-notification-time-info">
                                                                @{
                                                                    TimeSpan span = (DateTimeOffset.UtcNow - (notif?.WaktuProsesNotifikasi ?? DateTimeOffset.UtcNow));
                                                                    if (span.Days > 0)
                                                                        notif.TimeInfo = $"{span.Days} hari lalu";
                                                                    else if (span.Hours > 0)
                                                                        notif.TimeInfo = $"{span.Hours} jam lalu";
                                                                    else if (span.Minutes > 0)
                                                                        notif.TimeInfo = $"{span.Minutes} menit lalu";
                                                                    else
                                                                        notif.TimeInfo = $"{span.Seconds} detik lalu";

                                                                    var targetId = $"dropdown-notifikasi-action-{notif.IdNotifikasi}";
                                                                }

                                                                @*<span class="material-symbols-outlined notifikasi-more" tabindex="0" title="More content actions">more_horiz</span>*@
                                                                <div class="portal-notification-time-info-text">@notif.TimeInfo</div>
                                                            </div>
                                                        </div>

                                                        <div class="portal-notificationmenu-notification-dismissicon">
                                                            <button class="portal-btn-close button-with-icon" @onclick="(() => { ProsesHapusNotifikasi(notif); })"><span class="material-symbols-outlined">close</span></button>
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                                else
                                {
                                    <div class="portal-notificationpane-top">
                                        <div class="portal-notification-empty">
                                            <div class="portal-notification-empty-icon"><span class="material-symbols-outlined" style="scale: 4">notifications</span></div>
                                            <div class="nodata-content">@($"Belum ada notifikasi baru saat ini")</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </PthModal>
</CascadingValue>
<!-- #endregion -->



@code {
    private string activeTab { get; set; }
    private RenderFragment? RfContent;
    private string BottomNavVisible = "visible";
    private bool IsExitPromptVisible = false;
    private CancellationTokenSource? ExitCancelToken;
    private bool IsSelesaiRegister = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            UserEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value ?? "Tamu";
            Username = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value ?? "Tamu";
        }
        else
        {
            UserEmail = "xx@gmail.com";
            Username = "Tamu";
        }
        // DtNotifikasi.Add(new uimT9Notifikasi
        // {
        //     IdNotifikasi = Guid.NewGuid(),
        //     IdUser_Pengirim = Guid.Parse("00000001-0000-0000-0000-000000000000"),
        //     IdUser_Penerima = Guid.Parse("00000001-0000-0000-0000-000000000000"),
        //     UserPengirim_NamaPanggilan = "AUTO",
        //     UserPenerima_NamaPanggilan = "AUTO",
        //     IsRead = false,
        //     WaktuProsesNotifikasi = DateTimeOffset.Now,
        //     IsiPesan = "Pesanan dengan Id Transaksi DO-2501-GMA-0023 telah diproses oleh sistem",
        //     JenisPesan = "Bukan Dari User Login",
        //     NilaiPK = "564a0000-1779-e460-94b3-08dd1867a8cd",
        //     Form = "Pembayaran Berhasil",
        // });
    }

    public bool IsAnyModalOpen =>
        (ModalNotifikasi?.IsVisible ?? false) ||
        (ModalMessage?.IsVisible ?? false) ||
        (ModalMenu?.IsVisible ?? false);

    public bool IsModalNewMessageOpen => (ModalNewMessage?.IsVisible ?? false);
    public bool IsModalNewGroupOpen => (ModalNewGroup?.IsVisible ?? false);
    public bool IsModalCreateGroupOpen => (ModalCreateGroup?.IsVisible ?? false);
    public bool IsModalChatOpen => (ModalChat?.IsVisible ?? false);
    public void CloseAnyModal()
    {
        RefreshViewState.IsEnabled = true;
        if (ModalNotifikasi?.IsVisible ?? false) ModalNotifikasi.Close();
        if (ModalMessage?.IsVisible ?? false) ModalMessage.Close();
        if (ModalMenu?.IsVisible ?? false) ModalMenu.Close();
    }
    public void CloseModalNewMessage()
    {
        if (ModalNewMessage?.IsVisible ?? false) ModalNewMessage.Close();
    }
    public void CloseModalNewGroup()
    {
        if (ModalNewGroup?.IsVisible ?? false) ModalNewGroup.Close();
    }
    public void CloseModalCreateGroup()
    {
        if (ModalCreateGroup?.IsVisible ?? false) ModalCreateGroup.Close();
    }
    public void CloseModalChat()
    {
        if (ModalChat?.IsVisible ?? false) ModalChat.Close();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            RefreshViewState.IsEnabled = true;
            _svcStatusBar.SetStatusBarColor(Color.FromArgb("#333333"), true);
            SSR = new ClsServisSignalR();
            SSR.TerimaPesan(ssr_TerimaPesan);
            try
            {
                await SSR.MulaiKoneksi("LesKita"); //SignalR - Connect ke klien tertentu pada Hub                
            }
            catch (OperationCanceledException oc_ex) { }

            SetActiveTab("beranda", false);
            

            StateHasChanged();
        }
        if (!IsSelesaiRegister && ModalNotifikasi is not null && ModalMessage is not null)
        {
            IsSelesaiRegister = true;
            #if ANDROID
                // ✅ Daftarkan RcpmUtama ke BackPress setelah modal siap
                await Task.Delay(100); // Beri waktu supaya @ref tidak null
                MainActivity.RegisterRcpmUtama(this);
            #endif
        }
    }
    private async void SetActiveTab(string tabName, bool efekBouncing = true)
    {
        activeTab = tabName;
        RefreshViewState.IsEnabled = activeTab == "beranda";

        if (efekBouncing)
        {
            // Pindahkan indikator ke posisi baru
            await _js.InvokeVoidAsync("triggerBouncingAnimation");

            // Ganti konten tab setelah animasi selesai
            await Task.Delay(100);
        }

        RfContent = tabName switch
            {
                "beranda" => @<RcpBeranda></RcpBeranda>,
                "order" => @<RcpOrder></RcpOrder>,
                "jadwal" => @<RcpJadwal></RcpJadwal>,
                "bantuan" => @<RcpBantuan ></RcpBantuan>,
                "akun" => @<RcpAkun></RcpAkun>,
            };
        //await _js.InvokeVoidAsync("setScrollPositionInContainer", "scrollContainer", 0);
        await InvokeAsync(StateHasChanged);
    }

    private int GetIndicatorIndex(string tab)
    {
        return tab switch
        {
            "order" => 0,
            "jadwal" => 1,
            "beranda" => 2,
            "bantuan" => 3,
            "akun" => 4,
            _ => 2
        };
    }

    private string GetIcon(string tab)
    {
        return tab switch
        {
            "order" => "view_agenda",
            "jadwal" => "event_note",
            "beranda" => "home",
            "bantuan" => "chat",
            "akun" => "person",
            _ => "home"
        };
    }

    #region Notifikasi
    public bool TampilkanNotifikasi { get; set; } = false;
    public PthModal? ModalNotifikasi;
    public PthBottomSheet? BottomSheetNotifikasi;
    public List<uimT9Notifikasi> DtNotifikasi { get; set; } = new();
    public uimT9Notifikasi T9NotifikasiDipilih { get; set; } = new();
    private async void ProsesDismissAll()
    {
        DtNotifikasi.Clear();
        //if (DtNotifikasi.Where(x => x.IsRead == false).ToList().Count() < 1) SembunyikanBadgeNotifikasi = true;
        StateHasChanged();
        //TampilkanDropdownDismissAllNotification = !TampilkanDropdownDismissAllNotification;
    }

    private async void ProsesHapusNotifikasi(uimT9Notifikasi psr)
    {
        psr.IsBeingRemoved = true;
        DtNotifikasi.Remove(psr);

        //if (DtNotifikasi.Where(x => x.IsRead == false).ToList().Count() < 1) SembunyikanBadgeNotifikasi = true;
        StateHasChanged();
    }

    private System.Timers.Timer Timer;
    private string UrlInfoNotifikasi { get; set; } = "";
    private async void StartTimerNotifikasi()
    {
        Timer = new System.Timers.Timer(60000); // 1 detik
        Timer.Elapsed += (sender, args) =>
        {
            InvokeAsync(UpdateTimeInfoNotifikasi);
        };
        Timer.Start();

        await ProsesMarkNotifikasiSudahDibaca();
    }

    private void UpdateTimeInfoNotifikasi()
    {
        foreach (var notif in DtNotifikasi)
        {
            notif.TimeInfo = ProsesHitungTimer((DateTimeOffset)notif.WaktuProsesNotifikasi);
        }
        StateHasChanged();
    }

    private string ProsesHitungTimer(DateTimeOffset waktuProses)
    {
        TimeSpan span = DateTime.Now - waktuProses;
        if (span.Days > 0)
            return $"{span.Days} hari lalu";
        else if (span.Hours > 0)
            return $"{span.Hours} jam lalu";
        else if (span.Minutes > 0)
            return $"{span.Minutes} menit lalu";
        else
            return $"{span.Seconds} detik lalu";
    }

    public async void StopTimerNotifikasi()
    {

        Timer?.Stop();
        Timer?.Dispose();
        Timer = null;

        if (DtNotifikasi.Where(x => x.IsRead == false).ToList().Count() > 0)
        {
            await ProsesMarkNotifikasiSudahDibaca();
        }
    }

    public async Task ProsesMarkNotifikasiSudahDibaca(uimT9Notifikasi psr)
    {
        psr.IsRead = true;
        //if (DtNotifikasi.Where(x => x.IsRead == false).ToList().Count() < 1) SembunyikanBadgeNotifikasi = true;
        StateHasChanged();
    }
    async Task ProsesMarkNotifikasiSudahDibaca()
    {
        foreach (var notif in DtNotifikasi)
        {
            notif.IsRead = true;
        }
        await InvokeAsync(StateHasChanged);
    }
    #endregion

    #region Message
    public PthModal? ModalMessage;
    public PthModal? ModalNewMessage;
    public PthModal? ModalNewGroup;
    public PthModal? ModalCreateGroup;
    public PthModal? ModalChat;
    public PthModal? ModalMenu;
    IEnumerable<Employee> Data { get; set; } = new List<Employee>();
    Employee Value { get; set; } = new();
    Employee SelectedEmployee { get; set; } = new();
    List<Message> Messages { get; set; } = [];
    long IdMessageAktif { get; set; } = 0;
    Message SelectedMessage { get; set; } = new();
    void SelectEmployee(Employee employee)
    {
        SelectedEmployee = employee;
    }

    public class Message
    {
        public int IdMessage { get; set; }
        public string SenderName { get; set; }
        public string Content { get; set; }
        public string Time { get; set; }
        public bool IsMine { get; set; }
        public bool IsRead { get; set; }
        public bool IsReplyOtherUser { get; set; }
        public string ReplyMessageContent { get; set; }
        public string SenderReplyMessageContent { get; set; }
        public bool IsSendDocument { get; set; }
        public string FilenameDocument { get; set; }
        public string FilesizeDocument { get; set; }
    }

    public class Employee
    {
        public int Id { get; set; }
        public string FullName { get; set; }
        public string Notes { get; set; }
        public string ImageFileName { get; set; }
        public string StatusMessage { get; set; }
        public string TotalUnreadMessage { get; set; }
        }

        string TextValue { get; set; } = null;
        BindValueMode BindValueMode { get; set; } = BindValueMode.OnInput;

        public bool ContactChecked { get; set; } = false;
        CheckBoxContentAlignment Alignment { get; set; } = CheckBoxContentAlignment.Left;
        LabelPosition LabelPosition { get; set; } = LabelPosition.Right;

        string TextGroupName { get; set; } = null;

        private void ToggleCheckBox()
        {
            ContactChecked = !ContactChecked;
        }

        private string iconClass = string.Empty;

        private void AddIconActiveClass()
        {
            iconClass = "icon-active";
        }

        private void RemoveIconActiveClass()
        {
            iconClass = string.Empty;
        }

        void ProsesTampilkanPanelChat(IEnumerable<Employee> values)
        {
            if (values.Count() > 1)
            {
                var msg = values.Count() + " items are selected";
            }
            else
            {
                ModalChat.Show(); 
                RefreshViewState.IsEnabled = false;
            }
        }

        #endregion

    #region SignalR
        public ClsServisSignalR SSR;
        // public event PaymentBerhasilEventHandler? PaymentBerhasilDiterima;
        // public delegate void PaymentBerhasilEventHandler(PesanSignalR psr);
        
        public async void ssr_TerimaPesan(PesanSignalR psr)
        {
            //NotifikasiSignalDiterima?.Invoke(psr);
            if (psr != null && psr.JenisPesan == "Notifikasi")
            {
                var notif = new uimT9Notifikasi
                {
                    IdNotifikasi = Guid.NewGuid(),
                    IdUser_Pengirim = Guid.Parse("00000001-0000-0000-0000-000000000000"),
                    IdUser_Penerima = Guid.Parse("00000001-0000-0000-0000-000000000000"),
                    UserPengirim_NamaPanggilan = "AUTO",
                    UserPenerima_NamaPanggilan = "AUTO",
                    IsRead = false,
                    WaktuProsesNotifikasi = DateTimeOffset.Now,
                    IsiPesan = psr.IsiPesan,
                    JenisPesan = "Bukan Dari User Login",
                    //NilaiPK = psr.IdTransaksi,
                    Form = psr.NamaForm,
                };
                DtNotifikasi.Add(notif);
                await InvokeAsync(StateHasChanged);
            }
        }

        public async Task KirimSignalR()
        {
            // try
            // {
            //     await SSR.KirimPesan( jenisPesan: "Notifikasi", namaForm:"Pembayaran Berhasil", statusAction:"Insert", namaFieldPK: "", nilaiPK:"00000001-0000-0000-0000-000000000000", waktuProses:DateTime.Now, isiPesan: "Pesanan dengan Id Transaksi DO-2501-GMA-0023 telah diproses oleh sistem", idUser:Guid.Parse("00000001-0000-0000-0000-000000000000"), User_NamaPanggilan:"AUTO", idUserPenerima: Guid.Parse("00000001-0000-0000-0000-000000000000"), userPenerima_NamaPanggilan:"AUTO");
            //         await Task.Delay(30000);
            // }
            // catch (Exception ex)
            // {
            // }
        }
    #endregion

    public string GetGreeting()
    {
        var now = DateTime.Now.ToLocalTime().TimeOfDay;

        if (now < new TimeSpan(12, 0, 0))
            return "Selamat pagi,";
        else if (now < new TimeSpan(15, 0, 0))
            return "Selamat siang,";
        else if (now < new TimeSpan(18, 0, 0))
            return "Selamat sore,";
        else
            return "Selamat malam,";
    }

}
