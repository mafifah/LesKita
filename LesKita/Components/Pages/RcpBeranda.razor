@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using static LesKita.Controllers.PaymentController
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject ISvcStatusBar _svcStatusBar
@inject NavigationManager NM
@inject RefreshViewState RefreshViewState
@inject IServiceProvider ServicesProv
@inject IJSRuntime JSR
@inject HttpClient Http
@inject IDbContextFactory<LesKitaDbContext> DbFactory

<style>
    .services{
    position:fixed !important;
    margin: 20px !important;
    top: 100px;
    width: -webkit-fill-available;
    border-radius:12px !important;
    }

    .service-item .icon-box {
    background-color: #eef3ff;
    border-radius: 12px;
    width: 64px;
    height: 64px;
    margin: 0 auto 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .service-item .icon-box .material-symbols-outlined {
    font-size: 32px;
    color: #4a6cf7;
    }

    .service-item .label {
    font-weight: 500;
    font-size: 14px;
    color: #333;
    }


    .tarif{
    border: 0.5px solid rgba(170, 170, 170, 0.3) !important;
    color: #6282c8;
    border-radius: 5px;
    min-width: 100px;
    }

    .tarif:hover {
    background-color: #6282c8;
    color:#fff;
    }

    .header-bar.mentor span{
    font-weight:300 !important;
    }
    .portal-notificationpane-top.mentor{
    padding: 20px 20px 0px 14px !important;
    }

    .panel-info-Mentor{
    display:flex;
    gap: 10px;
    padding: 20px;
    }
    .mentor-display-image{
    border: 0.5px solid rgba(170, 170, 170, 0.5) !important;
    width: 60px;
    height: 60px;
    border-radius: 6px;
    }
    .mentor-name{
    font-weight: 500;
    font-size: 16px;
    margin-bottom: 5px;
    color: #333;
    }

    .jadwal-section{
    margin-top:10px;
    }
    .panel-info-jadwal{
    padding:20px;
    }

    .jadwal-btn {
    border: 0.5px solid rgba(170, 170, 170, 0.5) !important;
    border-radius: 6px;
    padding: 8px 12px;
    background-color: #fff;
    cursor: pointer;
    font-size: 12px;
    color: #6282c8;
    }

    .pilih-mentor-btn {
    border: 0.5px solid #6282c8;
    border-radius: 6px;
    padding: 5px 10px;
    background-color: #6282c8;
    color: #fff;
    cursor: pointer;
    font-size: 12px;
    }

    .jadwal-btn.selected {
    border: 0.5px solid #6282c8;
    border-radius: 6px;
    padding: 8px 12px;
    background-color: #6282c8;
    color: #fff;
    }

    .biaya-mentoring{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-bottom:10px;
    }

    .biaya-mentoring span {
    color: #333;
    font-weight: 400;
    font-size:12px;
    }

    .biaya-mentoring .total {
    color: #333;
    font-weight: 600;
    font-size:14px;
    }
    .konfirmasi-section {
    padding: 20px;
    position: absolute;
    bottom: 0;
    width: -webkit-fill-available;
    z-index:10;
    }
    .panel-konfirmasi{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    }
    .total-payment{
    font-size: 14px;
    font-weight: 700;
    color: #333;
    }
    .confirm-button{
    align-content: flex-end;
    }
</style>
<style>
    .content-penugasan {
    padding-left: 10px;
    padding-top: 4px;
    }

    .filter-buttons {
    position: sticky;
    top: 0;
    z-index: 1000;
    background-color: white;
    padding: 5px;
    transition: box-shadow 0.05s ease-in-out;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.3) !important;
    }

    .cards-container {
    padding: 10px;
    }

    .top-card {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    height: 110px;
    }

    .card-body {
    padding: 10px;
    }

    .card-number {
    font-size: 26px;
    font-weight: 500;
    margin-bottom: 0.5rem;
    }

    .card-text {
    font-size: 12px;
    font weight: 600;
    color: #555;
    }

    .arrow {
    border: solid black;
    border-width: 0 1px 1px 0;
    display: inline-block;
    padding: 3px;
    }

    .down {
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
    }

    .card {
    flex: 1 1 100%;
    box-sizing: border-box;
    position: relative;
    padding: 10px;
    cursor: pointer;
    border-radius: 10px;
    margin: 5px;
    }

    .selected.first-item .selected-contact-icon {
    background-color: #333;
    color: white;
    }

    .listbox-item-template-contact {
    display: flex;
    align-items: center;
    }

    .listbox-item-template-avatar {
    width: 50px; /* Tetap memberikan lebar */
    aspect-ratio: 1 / 1; /* Membuatnya tetap bulat */
    background-color: gray;
    display: flex;
    justify-content: center;
    border-radius: 50%; /* Membuatnya benar-benar lingkaran */
    }

    .listbox-item-template-avatar .avatar-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 50%;
    }



    .listbox-item-template-initial {
    color: white;
    font-weight: bold;
    }

    .listbox-item-template-text {
    display: flex;
    flex-direction: column;
    margin-left: 8px;
    width: -webkit-fill-available;
    }

    .listbox-item-template-text-nama {
    color: #333;
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 0 !important;
    }

    .listbox-item-template-text-alamat-customer {
    font-size: 10px;
    opacity: 0.6;
    margin-bottom: 0;
    color: #333;
    }

    .assignment-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 12px;
    padding-bottom: 5px;
    padding-left: 10px;
    border-bottom: 1px solid #eee;
    }

    .header-icon {
    font-size: 26px;
    color: #333;
    }

    .header-content {
    font-size: 12px;
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 2px;
    line-height: 1.1;
    }

    .header-title {
    font-weight: 600;
    margin: 0;
    }

    .header-date {
    color: #666;
    margin: 0;
    font-size: 10px;
    }

    .header-badge {
    padding: 0px 8px;
    border-radius: 3px;
    font-size: 12px;
    }

    .header-badge.done {
    background-color: rgb(214, 255, 222);
    color: rgb(3, 172, 14);
    }

    .header-badge.waiting {
    background-color: #fdf5e6; /* krem lembut */
    color: #a67c00; /* cokelat kekuningan, cocok untuk status "menunggu" */
    }

    .header-badge.active {
    background-color: #d3e3fd; /* biru sedang */
    color: #588ddf; /* putih agar kontras dengan biru */
    }

    .header-badge.cancel {
    background-color: #ffeaef;
    color: #ef144a;
    }


    .header-menu {
    cursor: pointer;
    font-size: 20px;
    color: #333;
    }

    .assignment-date {
    font-weight: bold;
    }

    .assignment-route {
    color: #555;
    }

    .income-section {
    margin-top: 12px;
    }

    .income-label {
    color: #666;
    font-size: 10px;
    margin: 0;
    line-height: 1.2;
    }

    .income-amount {
    font-size: 12px;
    font-weight: 600;
    color: #333;
    margin: 0;
    line-height: 1.2;
    }

    .price{
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .price .nominal {
    font-size:12px;
    font-weight:500;
    }
</style>

<script>
    let dotNetRef = null;

    window.setDotNetRef = function (ref) {
    dotNetRef = ref;
    };

    window.snapPay = function (snapToken) {
    if (!window.snap || !dotNetRef) {
    console.error("Midtrans snap.js belum dimuat atau dotNetRef belum diset.");
    return;
    }

    window.snap.pay(snapToken, {
    onSuccess: function (result) {
    console.log("Success:", result);
    dotNetRef.invokeMethodAsync("OnPaymentSuccess", result);
    },
    onPending: function (result) {
    console.log("Pending:", result);
    dotNetRef.invokeMethodAsync("OnPaymentPending", result);
    },
    onError: function (result) {
    console.log("Error:", result);
    dotNetRef.invokeMethodAsync("OnPaymentError", result);
    }
    });
    };

</script>
@if(RcpUtama.User.Role != "Mentor")
{
    <div class="card services shadow-sm p-4 mb-4 bg-white rounded text-center">
        <div class="row row-cols-2 text-center g-3">
            <div class="col" @onclick="@(() => { ModalMentor?.Show(); })">
                <div class="service-item">
                    <div class="icon-box">
                        <span class="material-symbols-outlined">supervisor_account</span>
                    </div>
                    <div class="label">Mentor</div>
                </div>
            </div>
            <div class="col">
                <div class="service-item">
                    <div class="icon-box">
                        <span class="material-symbols-outlined">task</span>
                    </div>
                    <div class="label">Latihan Soal</div>
                </div>
            </div>
        </div>
    </div>
}


<PthModal @ref="ModalMentor">
    <div class="header-bar">
        <button type="button" @onclick="(() => { ModalMentor.Close(); })" class="btn button-with-icon btn-default pesan">
            <span style="scale: 1.2;" class="material-symbols-outlined" aria-hidden="true">arrow_back</span>
        </button>
        <span>@($"Rekomendasi Mentor")</span>
    </div>
    <div class="portal-content-container">
        <div class="portal-content-container-default">
            <div class="portal-content-wrapper">
                <div class="portal-content">
                    <div class="portal-stacklayout">
                        <div class="portal-notificationpane">
                            @if (DtMentor.Any() || DtMentor?.Count() < 1)
                            {
                                <div class="portal-notificationpane-top mentor">
                                    <ul class="portal-notificationpane-list">
                                        @foreach (var item in DtMentor.OrderByDescending(x => x.Jarak))
                                        {
                                            <div class="card">
                                                <div class="assignment-header">
                                                    <!-- Left icon -->
                                                    <i class="header-icon material-symbols-outlined">schedule</i>

                                                    <!-- Middle content -->
                                                    <div class="header-content">
                                                        <p class="header-title">Jadwal Tersedia</p>
                                                        <p class="header-date">
                                                            @string.Join(", ", item.ListT1JadwalMentor?.Where(j => !string.IsNullOrWhiteSpace(j.Hari)).Select(j => j.Hari).Distinct())
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="listbox-item-template-contact">
                                                    <div class="listbox-item-template-avatar">
                                                        @if (string.IsNullOrEmpty(item.UrlFoto))
                                                        {
                                                            <p class="listbox-item-template-initial">@GenerateInitials(item.Nama)</p>
                                                        }
                                                        else
                                                        {
                                                            <img src="@item.UrlFoto" alt="Avatar" class="avatar-img" />

                                                        }
                                                    </div>
                                                    <div class="listbox-item-template-text">
                                                        <p class="listbox-item-template-text-nama">@item.Nama</p>
                                                        <div class="border-line"></div>
                                                        <p class="listbox-item-template-text-alamat-customer text-muted">
                                                            <span class="text-warning">⭐</span> @item.Rating (@item.JumlahKlien ulasan)
                                                        </p>
                                                        <div class="border-line"></div>
                                                        <div class="price">
                                                            <div class="nominal">Rp @(GetThousandSeparator(item.Tarif))</div>
                                                            <div @onclick="@(() => { ProsesPilihMentor(item); })">
                                                                <button class="pilih-mentor-btn">Pilih Mentor</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </ul>
                                </div>
                            }
                            else
                            {
                                <div class="portal-notificationpane-top">
                                    <div class="portal-notification-empty">
                                        <div class="portal-notification-empty-icon"><span class="material-symbols-outlined" style="scale: 4">productivity</span></div>
                                        <div class="nodata-content">@($"Belum ada mentor yang tersedia di area anda")</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</PthModal>
<PthModal @ref="@ModalCreateOrder">
    <div class="header-bar mentor">
        <button type="button" @onclick="(() => { ModalCreateOrder.Close(); })" class="btn button-with-icon btn-default pesan">
            <span style="scale: 1.2;" class="material-symbols-outlined" aria-hidden="true">arrow_back</span>
        </button>
        <span>@($"Ringkasan Pesanan")</span>
    </div>
    <div class="portal-content-container">
        <div class="portal-content-container-default">
            <div class="portal-content-wrapper">
                <div class="portal-content">
                    <div class="portal-stacklayout">
                        <div class="portal-notificationpane" style="background-color:#f4f4f4">
                            <div class="bg-white">
                                <div class="panel-info-Mentor">
                                    <div class="mentor-display-image">
                                        <img src="@DrMentorDipilih?.UrlFoto" alt="Foto Mentor" style="width: 100%; height: 100%; object-fit: cover; border-radius: 6px;">
                                    </div>
                                    <div class="mentor-identity">
                                        <div class="mentor-name">@DrMentorDipilih?.Nama</div>
                                        <div class="mentor-address text-muted">@DrMentorDipilih?.Alamat</div>
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white jadwal-section">
                                <div class="panel-info-jadwal">
                                    <label style="font-weight: 600; display: block; margin-bottom: 20px;font-size:15px">Pilih Jadwal</label>
                                    <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                                        @if (DrMentorDipilih is not null && DrMentorDipilih?.ListT1JadwalMentor is not null)
                                        {
                                            @foreach (var item in DrMentorDipilih?.ListT1JadwalMentor?.OrderBy(x => x.Hari).ToList())
                                            {
                                                <button class="jadwal-btn @(DrJadwalDipilih?.IdJadwalMentor == item.IdJadwalMentor ? "selected" : "")" @onclick="(() => { ProsesPilihJadwal(item); })">@($"{item.Hari} {item.JamMulai?.ToString(@"hh\.mm")} - {item.JamSelesai?.ToString(@"hh\.mm")}")</button>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white jadwal-section">
                                <div class="panel-info-jadwal">
                                    <label style="font-weight: 600; display: block; margin-bottom: 20px;font-size:15px">Pilih Sesi</label>
                                    <div style="display: flex; gap: 8px; flex-wrap: wrap;">
                                        <button class="jadwal-btn @(JumlahSesi == 1 ? "selected" : "")" @onclick="(() => { ProsesPilihSesi(1); })">1x</button>
                                        <button class="jadwal-btn @(JumlahSesi == 2 ? "selected" : "")" @onclick="(() => { ProsesPilihSesi(2); })">2x</button>
                                        <button class="jadwal-btn @(JumlahSesi == 4 ? "selected" : "")" @onclick="(() => { ProsesPilihSesi(4); })">1 Bulan (4x)</button>
                                        <button class="jadwal-btn @(JumlahSesi == 12 ? "selected" : "")" @onclick="(() => { ProsesPilihSesi(12); })">3 Bulan (12x)</button>
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white jadwal-section">
                                <div class="panel-info-jadwal">
                                    <label style="font-weight: 600; display: block; margin-bottom: 20px;font-size:15px">Ringkasan Biaya</label>
                                    <div class="biaya-mentoring">
                                        <span class="text-muted">Biaya Sesi (@($"Rp {GetThousandSeparator(DrMentorDipilih?.Tarif)} x {JumlahSesi}"))</span>
                                        <span>@($"Rp {GetThousandSeparator(TotalBiaya)}")</span>
                                    </div>
                                    <div class="biaya-mentoring">
                                        <span class="text-muted">Biaya Layanan</span>
                                        <span>@($"Rp {GetThousandSeparator(TotalLayanan)}")</span>
                                    </div>
                                    <div class="biaya-mentoring">
                                        <span class="total">Pembayaranmu</span>
                                        <span class="total">@($"Rp {GetThousandSeparator(TotalBiaya + TotalLayanan)}")</span>
                                    </div>
                                </div>
                            </div>

                            <div class="bg-white konfirmasi-section">
                                <div class="panel-konfirmasi">
                                    <div class="confirm-text">
                                        <div class="text-muted" style="margin-bottom: 5px;">Pembayaranmu</div>
                                        <div class="total-payment">@($"Rp {GetThousandSeparator(TotalBiaya + TotalLayanan)}")</div>
                                    </div>
                                    <div class="confirm-button" @onclick="@ProsesBayar">
                                        <button class="jadwal-btn selected">Bayar & Konfirmasi</button>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</PthModal>

@code {
    [CascadingParameter]
    public RcpUtama RcpUtama { get; set; }

    public bool IsLoading_DtMentor { get; set; } = false;
    public bool IsSkeletonAktif { get; set; } = false;
    private int TinggiHeaderTersembunyi = 0;
    private int TinggiHeaderSticky = 0; // Tambahkan ini untuk menyimpan tinggi header sticky
    private bool IsScrollAktif = true;

    public List<uimT0Mentor> DtMentorTerbaik { get; set; } = new();
    public List<uimT0Mentor> DtMentor { get; set; } = new();

    private DotNetObjectReference<RcpBeranda>? dotNetRef;

    private LesKitaDbContext DbContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var x = RcpUtama;
        if (Http.BaseAddress == null) Http.BaseAddress = new Uri("https://localhost:7068/"); // ganti sesuai port kamu
        DbContext = DbFactory.CreateDbContext();
        var data = DbContext.Set<T0Mentor>().Include(x => x.ListT1JadwalMentor).AsNoTracking().ToList();

        DtMentor = data.Select(x => new uimT0Mentor
        {
            Id = x.Id,
            Nama = x.Nama,
            Alamat = x.Alamat,
            Tarif = x.Tarif,
            UrlFoto = "",
            IdUser = x.IdUser,
            ListT1JadwalMentor = x.ListT1JadwalMentor
        }).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSR.InvokeVoidAsync("setDotNetRef", dotNetRef);
        }
    }
    private string GetFormattedPrice(double tarif)
    {
        if (tarif >= 1000)
            return $"{tarif / 1000}K/jam";
        return tarif.ToString();
    }


    #region All Mentor
    public PthModal? ModalMentor;
    public uimT0Mentor DrMentorDipilih { get; set; }
    public async Task ProsesPilihMentor(uimT0Mentor Mentor)
    {
        DrMentorDipilih = Mentor;
        ModalCreateOrder.Show();
    } 
    #endregion

    #region Booking
    public PthModal? ModalCreateOrder;
    public uimT1Order DrOrderBaru { get; set; }
    public T1JadwalMentor DrJadwalDipilih { get; set; }
    public int JumlahSesi { get; set; } = 0;
    public double TotalBiaya { get; set; } = 0;
    public double TotalLayanan { get; set; } = 2000;
    public async Task ProsesPilihJadwal(T1JadwalMentor jadwal)
    {
        DrJadwalDipilih = jadwal;
    }

    public async Task ProsesPilihSesi(int sesi)
    {
        JumlahSesi = sesi;
        TotalBiaya = (double)DrMentorDipilih?.Tarif * (double)JumlahSesi;
        StateHasChanged();
    }
    public async Task ProsesBayar()
    {

        DrOrderBaru = new();
        DrOrderBaru.IdOrder = NewId.NextGuid();
        DrOrderBaru.IdTransaksi = GenerateIdTransaksi();
        DrOrderBaru.IsPaid = false;
        DrOrderBaru.JumlahSesi = JumlahSesi;
        DrOrderBaru.Harga = DrMentorDipilih?.Tarif ?? 0;
        DrOrderBaru.Total = TotalBiaya + TotalLayanan;

        //siswa
        DrOrderBaru.IdSiswa = RcpUtama.User.IdSiswa;
        DrOrderBaru.Siswa_Nama = RcpUtama.User.Nama;
        DrOrderBaru.Siswa_Email = RcpUtama.User.Email;
        DrOrderBaru.Siswa_Alamat = RcpUtama.User.Alamat;
        DrOrderBaru.Siswa_NoTelepon = RcpUtama.User.NoTelepon;

        //siswa
        DrOrderBaru.IdMentor = DrMentorDipilih.Id;
        DrOrderBaru.Mentor_Nama = DrMentorDipilih.Nama;
        DrOrderBaru.Mentor_Email = DrMentorDipilih.Email;
        DrOrderBaru.Mentor_Alamat = DrMentorDipilih.Alamat;
        DrOrderBaru.Mentor_NoTelepon = DrMentorDipilih.NoTelepon;
        DrOrderBaru.Mentor_IdUser = DrMentorDipilih.IdUser;
        DbContext.T1Order.Add(DrOrderBaru);
        await DbContext.SaveChangesAsync();

        var dto = new MidtransRequestDto
        {
            IdOrder = DrOrderBaru.IdOrder.ToString(),
            Siswa_Nama = DrOrderBaru.Siswa_Nama,
            Siswa_Email = DrOrderBaru.Siswa_Email,
            Total = (double)DrOrderBaru.Total,
        };


        var response = await Http.PostAsJsonAsync("api/payment/create", dto);
        // Baca respons JSON dari API backend
        var result = await response.Content.ReadFromJsonAsync<JsonElement>();

        if (result.TryGetProperty("token", out var snapTokenProp))
        {
            var snapToken = snapTokenProp.GetString();
            await JSR.InvokeVoidAsync("snapPay", snapToken);
        }
        else
        {
            var message = result.TryGetProperty("status_message", out var msg) ? msg.GetString() : "Tidak diketahui";
            Console.WriteLine("Gagal mendapatkan snap token: " + message);
        }
        StateHasChanged();
    }

    public string GenerateIdTransaksi()
    {
        var kodeTahunBulan = DateTime.Now.ToString("yyMM");
        string sequenceGenerated = GetSequenceTerbaruIdTransaksi(kodeTahunBulan);

        var idTransaksiGenerated = $"DO-{kodeTahunBulan}-{sequenceGenerated}";
        return idTransaksiGenerated;
    }

    public string GetSequenceTerbaruIdTransaksi(string kodeTahunBulan)
    {
        var idTransaksiTerakhir = DbContext.T1Order.AsNoTracking()
                                    .Where(dbSet => dbSet.IdTransaksi.Substring(3, 8) == $"{kodeTahunBulan}")
                                    .Select(d => d.IdTransaksi)
                                    .OrderByDescending(t => t)
                                    .FirstOrDefault();

        if (idTransaksiTerakhir is null)
        {
            return "0001";
        }
        var stringSequenceTerakhir = idTransaksiTerakhir.Substring(12);
        var intSequence = int.Parse(stringSequenceTerakhir);
        return (intSequence + 1).ToString().PadLeft(4, '0');
    }

    public List<T2Jadwal> GenerateJadwalLes(DayOfWeek hariYangDipilih, TimeSpan jamMulai, TimeSpan jamSelesai, int jumlahSesi, DateTimeOffset now, uimT1Order order)
    {
        var hasil = new List<T2Jadwal>();
        int sesiTerbuat = 0;

        DateTime current = GetNextDateThisWeek(hariYangDipilih, now);

        while (sesiTerbuat < jumlahSesi)
        {
            var tanggal = new DateTimeOffset(current.Date + jamMulai, now.Offset);
            var waktuMulai = jamMulai;
            var waktuSelesai = jamSelesai;

            if (tanggal >= now)
            {
                if (!IsBentrok(tanggal.Date, waktuMulai, waktuSelesai))
                {
                    hasil.Add(new T2Jadwal
                    {
                        IdOrder = order.IdOrder,
                        Tanggal = current.Date,
                        JamMulai = jamMulai,
                        JamSelesai = jamSelesai,
                        Status = false,
                    });

                    sesiTerbuat++;
                }
            }

            current = current.AddDays(7);
        }

        return hasil;
    }

    bool IsBentrok(DateTime tanggal, TimeSpan mulai, TimeSpan selesai)
    {
        return DbContext.T2Jadwal.AsNoTracking().Any(j =>
            j.Tanggal.HasValue &&
            j.Tanggal.Value.Date == tanggal &&
            ((mulai >= j.JamMulai && mulai < j.JamSelesai) ||
             (selesai > j.JamMulai && selesai <= j.JamSelesai)));
    }

    DateTime GetNextDateThisWeek(DayOfWeek targetDay, DateTimeOffset from)
    {
        int daysUntil = ((int)targetDay - (int)from.DayOfWeek + 7) % 7;
        return from.Date.AddDays(daysUntil);
    }


    public DayOfWeek ConvertToDayOfWeek(string hari)
    {
        switch (hari.ToLower())
        {
            case "senin": return DayOfWeek.Monday;
            case "selasa": return DayOfWeek.Tuesday;
            case "rabu": return DayOfWeek.Wednesday;
            case "kamis": return DayOfWeek.Thursday;
            case "jumat": return DayOfWeek.Friday;
            case "sabtu": return DayOfWeek.Saturday;
            case "minggu": return DayOfWeek.Sunday;
            default: throw new ArgumentException("Hari tidak valid");
        }
    }


    #endregion

    #region Payment Handler
    [JSInvokable]
    public async Task OnPaymentSuccess(JsonElement result)
    {
        Console.WriteLine("Pembayaran berhasil: " + result);
        ModalMentor.Close();
        ModalCreateOrder.Close();
        var notif = new uimT9Notifikasi
        {
            IdNotifikasi = Guid.NewGuid(),
            IdUser_Penerima = RcpUtama.User.IdUser,
            UserPenerima_NamaPanggilan = RcpUtama.User.Nama,
            IsRead = false,
            WaktuProsesNotifikasi = DateTimeOffset.Now,
            IsiPesan = $"Pembayaran untuk order dengan ID Transaksi {DrOrderBaru.IdTransaksi} berhasil diproses",
            JenisPesan = "Bukan Dari User Login",
            Form = "Notifikasi",
        };
        RcpUtama.DtNotifikasi.Add(notif);
        StateHasChanged();
        if (DrOrderBaru != null && DrOrderBaru.IdMentor != null)
        {
            await RcpUtama.KirimSignalR(
                jenisPesan: "Notifikasi",
                namaForm: "Order Baru",
                statusAction: "Insert",
                namaFieldPK: "IdOrder",
                nilaiPK: DrOrderBaru.IdOrder,
                waktuProses: DateTime.Now,
                isiPesan: $"Anda menerima order les baru dari {DrOrderBaru.Siswa_Nama}, ID transaksi: {DrOrderBaru.IdTransaksi}",
                idUser: Guid.Empty,
                User_NamaPanggilan: "",
                idUserPenerima: (Guid)DrOrderBaru.Mentor_IdUser,
                userPenerima_NamaPanggilan: DrOrderBaru.Mentor_Nama);
        }
        DrOrderBaru.IsPaid = false;
        DrOrderBaru.IsAktif = true;
        DbContext.T1Order.Update(DrOrderBaru);
        //Generate jadwal les
        var jadwalLes = GenerateJadwalLes(hariYangDipilih: ConvertToDayOfWeek(DrJadwalDipilih.Hari), jamMulai: (TimeSpan)DrJadwalDipilih.JamMulai, jamSelesai: (TimeSpan)DrJadwalDipilih.JamSelesai, jumlahSesi: JumlahSesi, now: DateTimeOffset.Now, order: DrOrderBaru);
        DbContext.T2Jadwal.AddRange(jadwalLes);
        await DbContext.SaveChangesAsync();

        DrOrderBaru = null;
        DrMentorDipilih = null;
        DrJadwalDipilih = null;

        
    }

    [JSInvokable]
    public async Task OnPaymentPending(JsonElement result)
    {

        Console.WriteLine("Pembayaran pending: " + result);
        ModalMentor.Close();
        ModalCreateOrder.Close();
        DrOrderBaru = null;
        DrMentorDipilih = null;
        DrJadwalDipilih = null;
    }

    [JSInvokable]
    public async Task OnPaymentError(JsonElement result)
    {
        Console.WriteLine("Pembayaran error: " + result);
        ModalMentor.Close();
        ModalCreateOrder.Close();
        DrOrderBaru = null;
        DrMentorDipilih = null;
        DrJadwalDipilih = null;
    }
    #endregion

    
}
