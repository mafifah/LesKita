@using LesKita.Components
<style>
    .page {
    background-color: #f9fafb;
    height: calc(100vh - 40px) !important;
    }

    .header {
    display: none !important;
    }

    .card-modern {
    background-color: #fff;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    padding: 16px;
    margin: 12px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    font-family: 'Segoe UI', sans-serif;
    border: 1px solid #eee;
    }

    .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #fff;
    padding: 0rem 0rem 1rem 0rem !important;
    }

    .status-badge {

    font-size: 12px;
    font-weight: 600;
    padding: 4px 10px;
    border-radius: 8px;
    }

    .status-badge.done {
    background-color: rgb(214, 255, 222);
    color: rgb(3, 172, 14);
    }

    .status-badge.waiting {
    background-color: #fdf5e6; /* krem lembut */
    color: #a67c00; /* cokelat kekuningan, cocok untuk status "menunggu" */
    }

    .status-badge.active {
    background-color: #d3e3fd; /* biru sedang */
    color: #588ddf; /* putih agar kontras dengan biru */
    }

    .status-badge.cancel {
    background-color: #ffeaef;
    color: #ef144a;
    }

    .time-label {
    color: #555;
    font-size: 12px;
    font-weight:700;
    padding: 4px 8px;
    border-radius: 6px;
    display: flex;
    align-items: center;
    gap: 4px;
    }

    .card-content {
    display: flex;
    gap: 12px;
    }

    .card-content img {
    width: 64px;
    height: 64px;
    border-radius: 12px;
    object-fit: cover;
    }

    .card-info-title {
    font-weight: 600;
    color: #333;
    }

    .card-info-sub {
    font-size: 12px;
    color: #999;
    }

    .card-customer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    }

    .customer-info {
    display: flex;
    align-items: center;
    gap: 10px;
    }

    .customer-info img {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    object-fit: cover;
    }

    .customer-name {
    font-size: 14px;
    font-weight: 600;
    color: #333;
    }

    .customer-role {
    font-size: 10px;
    color: #888;
    }

    .card-footer {
    border-top: 1px solid #eee;
    font-size: 12px;
    color: #777;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #fff;
    padding: 10px 0rem 0rem 0rem !important;
    }

    .btn-action {
    background-color: #6282c8;
    color: white;
    font-size: 12px;
    padding: 6px 12px;
    border-radius: 6px;
    border: none;
    cursor: pointer;
    }

    .action-order{
    width: 35px;
    height: 35px;
    background-color: #f1f5f9;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    }

    .action-order span{
    cursor: pointer;
    font-size:18px;
    color: #6282c8;
    }

    .action-order:hover,
    .action-order:active
    {
    background-color: #6282c8;
    }

    .action-order span:hover,
    .action-order span:active
    {
    color: #fff;
    }
</style>
<style>
    .rating-place {
    display: flex;
    width: -webkit-fill-available;
    align-items: center;
    justify-content: center;
    }

    .komentar {
    width: -webkit-fill-available;
    }

    .komentar textarea {
    width: -webkit-fill-available;
    }
    .btn-review {
    width: -webkit-fill-available;
    background-color: #3a5db4;
    border:none;
    border-radius: 10px;
    font-size: 16px;
    font-weight: 600;
    }

    .btn-review:hover,
    .btn-review:active {
    background-color: #2f4da1;
    }
</style>
@foreach (var item in DtOrder)
{
    <div class="card-modern">
        <!-- Header -->
        <div class="card-header">
            <span class="status-badge @(item.IsCancel ? "cancel" :!item.IsPaid ? "waiting" :item.IsDone ? "done" :item.IsAktif ? "active" : "")">@GetStatusOrder(item)</span>
            <span class="time-label">
                @GetFormattedDate(item.TanggalPemesanan)
            </span>
        </div>

        <!-- Customer -->
        <div class="card-customer">
            <div class="customer-info">
                <img src="https://randomuser.me/api/portraits/women/39.jpg" alt="Avatar">
                <div>
                    <div class="customer-name">@item.Mentor_Nama</div>
                    <div class="customer-role">@item.Mentor_Alamat</div>
                </div>
            </div>
            @if (item.IsAktif || item.IsPaid)
            {
                <div style="display: flex; gap: 8px;">
                    <div class="action-order">
                        <span class="material-symbols-outlined">
                            call
                        </span>
                    </div>
                    <div class="action-order">
                        <span class="material-symbols-outlined">
                            chat
                        </span>
                    </div>
                </div>
            }
        </div>
        @if (item.IsAktif)
        {
            <!-- Footer -->
            <div class="card-footer">
                <span></span>
                <button class="btn-action" @onclick="@ProsesSelesaikanPesanan">
                    Selesai
                </button>
            </div>
        }

    </div>

}

<PthBottomSheet @ref="BottomSheetReview">
    <div class="max-w-sm mx-auto mt-10 p-6 bg-white rounded-xl shadow-md relative">
        <!-- Tap to rate -->
        <p class="text-sm mb-2" style="font-size: 16px;font-weight: 600;">Tap to rate</p>

        <!-- Stars Placeholder (can be made interactive later) -->
        <div class="space-x-1 mb-4 rating-place">
            @for (int i = 0; i < 5; i++)
            {
                var index = i;  // Salin ke variabel lokal agar tidak tertimpa
                <span @onclick="() => SetRating(index + 1)"
                      style="font-size: 40px; color:@(index < currentRating ? "gold" : "gray")"
                      class="material-symbols-sharp cursor-pointer">
                    <i class="fa @(i < currentRating ? "fa-star" : "fa regular fa-star")" aria-hidden="true"></i>
                </span>
            }
        </div>


        <div class="komentar">
            <p class="text-sm mb-2" style="font-size: 16px;font-weight: 600;">Tell us more (optional)</p>
            <textarea placeholder="Why this rating?" class="w-full border border-gray-300 rounded-md p-2 text-sm mb-4 resize-none focus:outline-none focus:ring-2 focus:ring-yellow-400"></textarea>

        </div>


        <!-- Submit Button -->
        <button class="text-white py-2 text-sm font-semibold btn-review">Selesaikan Pesanan</button>
    </div>

</PthBottomSheet>

@code {
    public PthBottomSheet BottomSheetReview { get; set; }
    private List<T1Order> DtOrder = new();

    protected override async Task OnInitializedAsync()
    {
        DtOrder = new List<T1Order>
        {
            new T1Order
            {
                IdOrder = Guid.NewGuid(),
                IdSiswa = Guid.NewGuid(),
                IdMentor = Guid.NewGuid(),
                JumlahSesi = 4,
                TanggalPemesanan = DateTimeOffset.Now.AddDays(-2),
                Siswa_Nama = "Ali",
                Siswa_TanggalLahir = new DateTimeOffset(2010, 5, 1, 0, 0, 0, TimeSpan.Zero),
                Siswa_Usia = DateTimeOffset.Now.AddYears(-13),
                Siswa_Alamat = "Jl. Merdeka No. 10",
                Mentor_Nama = "Bu Rina",
                Mentor_TanggalLahir = new DateTimeOffset(1990, 8, 15, 0, 0, 0, TimeSpan.Zero),
                Mentor_Usia = DateTimeOffset.Now.AddYears(-34),
                Mentor_Alamat = "Jl. Mawar No. 5",
                Harga = 50000,
                Total = 200000,
                IsPaid = true,
                IsAktif = true,
                ListT2Jadwal = new List<T2Jadwal>
                {
                    new T2Jadwal { Tanggal = DateTimeOffset.Now.AddDays(1), JamMulai = new TimeSpan(15, 0, 0), JamSelesai = new TimeSpan(16, 0, 0) },
                    new T2Jadwal { Tanggal = DateTimeOffset.Now.AddDays(8), JamMulai = new TimeSpan(15, 0, 0), JamSelesai = new TimeSpan(16, 0, 0) },
                    new T2Jadwal { Tanggal = DateTimeOffset.Now.AddDays(14), JamMulai = new TimeSpan(15, 0, 0), JamSelesai = new TimeSpan(16, 0, 0) },
                    new T2Jadwal { Tanggal = DateTimeOffset.Now.AddDays(28), JamMulai = new TimeSpan(15, 0, 0), JamSelesai = new TimeSpan(16, 0, 0) },
                }
            },
            new T1Order
            {
                IdOrder = Guid.NewGuid(),
                IdSiswa = Guid.NewGuid(),
                IdMentor = Guid.NewGuid(),
                JumlahSesi = 2,
                TanggalPemesanan = DateTimeOffset.Now.AddDays(-5),
                Siswa_Nama = "Budi",
                Siswa_TanggalLahir = new DateTimeOffset(2008, 9, 10, 0, 0, 0, TimeSpan.Zero),
                Siswa_Usia = DateTimeOffset.Now.AddYears(-16),
                Siswa_Alamat = "Jl. Diponegoro No. 20",
                Mentor_Nama = "Pak Andi",
                Mentor_TanggalLahir = new DateTimeOffset(1985, 3, 22, 0, 0, 0, TimeSpan.Zero),
                Mentor_Usia = DateTimeOffset.Now.AddYears(-39),
                Mentor_Alamat = "Jl. Melati No. 12",
                Harga = 50000,
                Total = 50000,
                IsPaid = true,
                IsDone = true,
                ListT2Jadwal = new List<T2Jadwal>
                {
                    new T2Jadwal { Tanggal = DateTimeOffset.Now.AddDays(2), JamMulai = new TimeSpan(15, 0, 0), JamSelesai = new TimeSpan(16, 0, 0) },
                }
            },
            new T1Order
            {
                IdOrder = Guid.NewGuid(),
                IdSiswa = Guid.NewGuid(),
                IdMentor = Guid.NewGuid(),
                JumlahSesi = 1,
                TanggalPemesanan = DateTimeOffset.Now.AddDays(-1),
                Siswa_Nama = "Citra",
                Siswa_TanggalLahir = new DateTimeOffset(2012, 11, 30, 0, 0, 0, TimeSpan.Zero),
                Siswa_Usia = DateTimeOffset.Now.AddYears(-12),
                Siswa_Alamat = "Jl. Kenanga No. 3",
                Mentor_Nama = "Bu Sari",
                Mentor_TanggalLahir = new DateTimeOffset(1992, 12, 1, 0, 0, 0, TimeSpan.Zero),
                Mentor_Usia = DateTimeOffset.Now.AddYears(-32),
                Mentor_Alamat = "Jl. Anggrek No. 7",
                Harga = 60000,
                Total = 60000,
                IsCancel = true,
                ListT2Jadwal = new List<T2Jadwal>
                {
                    new T2Jadwal { Tanggal = DateTimeOffset.Now.AddDays(5), JamMulai = new TimeSpan(17, 0, 0), JamSelesai = new TimeSpan(18, 0, 0) },
                }
            }
        };

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {

        }
        // _svcStatusBar.SetStatusBarColor(Color.FromArgb("#ffffff"), true);
    }

    public string GetStatusOrder(T1Order order)
    {
        if (order.IsCancel)
            return "Dibatalkan";

        if (!order.IsPaid)
            return "Menunggu Pembayaran";

        if (order.IsDone)
            return "Selesai";

        if (order.IsAktif)
            return "Diproses";

        return "Status Tidak Diketahui";
    }

    public async Task ProsesSelesaikanPesanan()
    {
        BottomSheetReview.ShowBottomSheet();
    }

    #region Rating
    int currentRating = 0;

    void SetRating(int rating)
    {
        Console.WriteLine($"[DEBUG] Rating clicked: {rating}");
        currentRating = rating;
        StateHasChanged();
    }
    #endregion
}